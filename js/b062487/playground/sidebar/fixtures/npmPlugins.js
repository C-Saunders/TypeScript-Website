define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.allNPMPlugins = void 0;
    exports.allNPMPlugins = [
        {
            name: "Live Transformer",
            id: "playground-live-transformer",
            description: "A plugin to create a TypeScript transformer live in the playground",
            author: "kevram",
            href: "https://github.com/kevinramharak/playground-live-transformer",
        },
        {
            name: "Code Show Flow",
            id: "playground-code-show-flow",
            description: "Visualize TypeScript's code inference flow nodes",
            author: "orta",
            href: "https://github.com/orta/playground-code-show-flow",
        },
        {
            name: "@Structured Types/instant Documentation Plugin",
            id: "@structured-types/instant-documentation-plugin",
            description: "TypeScript playground plugin to display instant documentation.",
            author: "atanasster",
            href: "https://github.com/ccontrols/structured-types",
        },
        {
            name: "@Structured Types/plugin",
            id: "@structured-types/playground-plugin",
            description: "TypeScript playground plugin to display the types from source code.",
            author: "atanasster",
            href: "https://github.com/ccontrols/structured-types",
        },
        {
            name: "Link Shortener",
            id: "typescript-playground-link-shortener",
            description: "Create short-links for your current playground code and compiler settings",
            author: "gillchristian",
            href: "https://github.com/gillchristian/tsplay.dev",
        },
        {
            name: "Dt Review",
            id: "playground-dt-review",
            description: "Makes reviewing DefinitelyTyped PRs easier",
            author: "orta",
            href: "https://github.com/orta/playground-dt-review",
        },
        {
            name: "Codeblock Examples",
            id: "playground-plugin-codeblock-examples",
            description: "Use markdown codeblocks to demo many code samples in the playground",
            author: "orta",
            href: "https://github.com/orta/playground-plugin-codeblock-examples",
        },
        {
            name: "Collaborate",
            id: "playground-collaborate",
            description: "A simple way to live-code in the Playground with others.",
            author: "orta",
            href: "https://github.com/orta/playground-collaborate",
        },
        {
            name: "Clippy",
            id: "playground-clippy",
            description: "Finally, someone who has an answer for every problem in your Playground",
            author: "orta",
            href: "https://github.com/orta/playground-clippy",
        },
        {
            name: "Format On Save",
            id: "playground-format-on-save",
            description: "TypeScript Playground plugin to save on format",
            author: "anuraghazra",
            href: "https://github.com/anuraghazra/playground-format-on-save",
        },
        {
            name: "Ts Scanner",
            id: "playground-ts-scanner",
            description: "See the results of the TypeScript Scanner on some code",
            author: "orta",
            href: "https://github.com/orta/playground-ts-scanner",
        },
        {
            name: "TypeScript Json Schema",
            id: "playground-typescript-json-schema",
            description: "Convert the exported types/interfaces in the Playground to JSON Schemas",
            author: "orta",
            href: "https://github.com/orta/playground-typescript-json-schema",
        },
        {
            name: "Transformer Timeline",
            id: "playground-transformer-timeline",
            description: "Lets you see each stage of the transform process for a TypeScript JS + DTS emit as a timeline.",
            author: "orta",
            href: "https://github.com/orta/playground-transformer-timeline",
        },
        {
            name: "Browser Fs",
            id: "playground-browser-fs",
            description: "Playground plugin to enable other plugins to use BrowserFS as filesystem",
            author: "kevram",
            href: "https://github.com/kevinramharak/playground-browser-fs",
        },
        {
            name: "Ts Transform Runtime Check",
            id: "playground-ts-transform-runtime-check",
            description: "A playground plugin for ts-transform-runtime-check",
            author: "kevram",
            href: "https://github.com/kevinramharak/playground-ts-transform-runtime-check",
        },
        {
            name: "@Type Challenges/plugin",
            id: "@type-challenges/playground-plugin",
            description: "Playground integration for Type Challenges",
            author: "antfu",
            href: "https://github.com/type-challenges/playground-type-challenges-plugin",
        },
        {
            name: "Presentation Mode",
            id: "typescript-playground-presentation-mode",
            description: "Present your TypeScript talk directly in the playground, powered by GitHub gists!",
            author: "orta",
            href: "https://github.com/orta/playground-slides",
        },
        {
            name: "Prettier",
            id: "ts-playground-plugin-prettier",
            description: "A simple button to make valid playground code Prettier!",
            author: "xavdid",
            href: "https://github.com/xavdid/ts-playground-plugin-prettier",
        },
        {
            name: "Ts Symbols",
            id: "playground-ts-symbols",
            description: "Shows the compiler symbols which are created by your playground code",
            author: "orta",
            href: "https://github.com/orta/playground-ts-symbols",
        },
        {
            name: "Dts Plugin",
            id: "playground-dts-plugin",
            description: "Generate d.ts from JS",
            author: "sanders_n",
            href: "https://github.com/sandersn/playground-dts-plugin",
        },
        {
            name: "Planning Day",
            id: "planning-day",
            description: "TypeScript Playground plugin for planning an agile sprint or iteration by combining static type verification of configuration with a React Gantt chart visualization.",
            author: "jsuder",
            href: "https://github.com/JSuder-xx/planning-day",
        },
        {
            name: "GitHub Explorer",
            id: "ts-playground-plugin-github-explorer",
            description: "Explore a GitHub repo on TypeScript playground",
            author: "emnudge",
            href: "https://www.npmjs.com/package/ts-playground-plugin-github-explorer",
        },
        {
            name: "Vim",
            id: "ts-playground-plugin-vim",
            description: "Provides Vim keybindings for TypeScript Playground editor.",
            author: "quramy",
            href: "https://www.npmjs.com/package/ts-playground-plugin-vim",
        },
    ];
});
//# sourceMappingURL=data:application/json;base64,